<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="public/style.css">
    <link rel="icon" type="image/x-icon" href="public/icon.svg">
    <script src="https://d3js.org/d3.v4.js"></script>
    <title>Unterschriften JUSO JS Bielingue Signatures</title>
</head>

<body>
    <div id="top">
        <div id="title">
            <h1>Zukunft Initative | Initative pour l'avenire</h1>
        </div>
        <div id="total">
            <script>
                // set the dimensions and margins of the graph
                var margin = { top: 0, right: 30, bottom: 20, left: 0 },
                    width = 460 - margin.left - margin.right,
                    height = 400 - margin.top - margin.bottom;

                // append the svg object to the body of the page
                var svg = d3.select("#total")
                    .append("svg")
                    .attr("width", width + margin.left + margin.right)
                    .attr("height", height + margin.top + margin.bottom)
                    .append("g")
                    .attr("transform",
                        "translate(" + margin.left + "," + margin.top + ")");

                // Parse the Data
                d3.csv("https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/data_stacked.csv", function (data) {


                    // List of subgroups = header of the csv files = soil condition here
                    var subgroups = data.columns.slice(1)

                    // List of groups = species here = value of the first column called group -> I show them on the X axis
                    var groups = d3.map(data, function (d) { return (d.group) }).keys()

                    // Add X axis
                    var x = d3.scaleBand()
                        .domain(groups)
                        .range([0, width])
                        .padding([0.2])
                    svg.append("g")
                        .attr("transform", "translate(0," + height + ")")
                        .call(d3.axisBottom(x).tickSizeOuter(0));

                    // Add Y axis
                    var y = d3.scaleLinear()
                        .domain([0, 100])
                        .range([height, 0]);
                    svg.append("g")
                        .call(d3.axisLeft(y));

                    // color palette = one color per subgroup
                    var color = d3.scaleOrdinal()
                        .domain(subgroups)
                        .range(['#e41a1c', '#377eb8', '#4daf4a'])

                    // Normalize the data -> sum of each group must be 100!
                    console.log(data)
                    dataNormalized = []
                    data.forEach(function (d) {
                        // Compute the total
                        tot = 0
                        for (i in subgroups) { name = subgroups[i]; tot += +d[name] }
                        // Now normalize
                        for (i in subgroups) { name = subgroups[i]; d[name] = d[name] / tot * 100 }
                    })

                    //stack the data? --> stack per subgroup
                    var stackedData = d3.stack()
                        .keys(subgroups)
                        (data)

                    // Show the bars
                    svg.append("g")
                        .selectAll("g")
                        // Enter in the stack data = loop key per key = group per group
                        .data(stackedData)
                        .enter().append("g")
                        .attr("fill", function (d) { return color(d.key); })
                        .selectAll("rect")
                        // enter a second time = loop subgroup per subgroup to add all rectangles
                        .data(function (d) { return d; })
                        .enter().append("rect")
                        .attr("x", function (d) { return x(d.data.group); })
                        .attr("y", function (d) { return y(d[1]); })
                        .attr("height", function (d) { return y(d[0]) - y(d[1]); })
                        .attr("width", x.bandwidth())
                })

            </script>
        </div>
    </div>
    <div id="bottom">
        <div id="monat"></div>
        <div id="leaderboard">
            <p>

            </p>
        </div>
        <div id="altjusos">
            <p>
                <%= test %>
            </p>
        </div>
    </div>
</body>

</html>